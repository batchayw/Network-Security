name: CI-CD Pipeline

# Trigger the pipeline on push or pull request to the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Environment variables
env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}  # Docker Hub username (set in GitHub secrets)
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}        # Docker Hub token (set in GitHub secrets)

jobs:
  # Job for Continuous Integration (CI)
  ci:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Clone the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Docker and Docker Compose
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 3: Validate docker-compose.yml syntax
      - name: Validate docker-compose.yml
        run: docker-compose -f docker-compose.yml config

      # Step 4: Build containers (without starting them)
      - name: Build Docker images
        run: docker-compose -f docker-compose.yml build

      # Step 5: Test containers (optional, simple check)
      - name: Test containers
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 10  # Wait for containers to start
          docker-compose -f docker-compose.yml ps  # Check container status
          docker-compose -f docker-compose.yml down  # Stop containers

  # Job for Continuous Deployment (CD)
  cd:
    needs: ci  # This job depends on the CI job completion
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only runs on the main branch

    steps:
      # Step 1: Clone the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      
      - name: Pull Docker images
        run: docker-compose -f docker-compose.yml pull

      - name: List Docker images (debug)
        run: docker images

      # Step 3: Build and push Docker images to Docker Hub
      - name: Tag and push Docker images
        run: |
          # Tag the pulled images with your Docker Hub username
          docker tag kylemanna/openvpn ${DOCKERHUB_USERNAME}/network-security-openvpn:latest
          docker tag rastasheep/ubuntu-sshd:18.04 ${DOCKERHUB_USERNAME}/network-security-bastion:latest
          docker tag owasp/modsecurity-crs:nginx ${DOCKERHUB_USERNAME}/network-security-waf:latest
          docker tag cowrie/cowrie ${DOCKERHUB_USERNAME}/network-security-honeypot:latest
          docker tag httpd ${DOCKERHUB_USERNAME}/network-security-internal-server:latest
          # Push the tagged images to Docker Hub
          docker push ${DOCKERHUB_USERNAME}/network-security-openvpn:latest
          docker push ${DOCKERHUB_USERNAME}/network-security-bastion:latest
          docker push ${DOCKERHUB_USERNAME}/network-security-waf:latest
          docker push ${DOCKERHUB_USERNAME}/network-security-honeypot:latest
          docker push ${DOCKERHUB_USERNAME}/network-security-internal-server:latest

      # Step 4: (Optional) Deploy to a remote server
      # Uncomment and configure this step if you have a remote server
      # - name: Deploy to server
      #   run: |
      #     ssh user@your-server-ip << 'EOF'
      #       cd /path/to/your/deployment
      #       docker-compose pull
      #       docker-compose up -d
      #     EOF
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}